{
  "id": "ad91818e-e220-4d4f-bbd9-046f84171d48",
  "prevId": "00000000-0000-0000-0000-000000000000",
  "version": "7",
  "dialect": "postgresql",
  "tables": {
    "public.hack_prerequisites": {
      "name": "hack_prerequisites",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true,
          "default": "gen_random_uuid()"
        },
        "hack_id": {
          "name": "hack_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "prerequisite_hack_id": {
          "name": "prerequisite_hack_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": false,
          "default": "now()"
        }
      },
      "indexes": {
        "idx_hack_prerequisites_hack_id": {
          "name": "idx_hack_prerequisites_hack_id",
          "columns": [
            {
              "expression": "hack_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "uuid_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "idx_hack_prerequisites_prerequisite_hack_id": {
          "name": "idx_hack_prerequisites_prerequisite_hack_id",
          "columns": [
            {
              "expression": "prerequisite_hack_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "uuid_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        }
      },
      "foreignKeys": {
        "hack_prerequisites_hack_id_fkey": {
          "name": "hack_prerequisites_hack_id_fkey",
          "tableFrom": "hack_prerequisites",
          "tableTo": "hacks",
          "columnsFrom": [
            "hack_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "cascade",
          "onUpdate": "no action"
        },
        "hack_prerequisites_prerequisite_hack_id_fkey": {
          "name": "hack_prerequisites_prerequisite_hack_id_fkey",
          "tableFrom": "hack_prerequisites",
          "tableTo": "hacks",
          "columnsFrom": [
            "prerequisite_hack_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "cascade",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {
        "hack_prerequisites_hack_id_prerequisite_hack_id_key": {
          "name": "hack_prerequisites_hack_id_prerequisite_hack_id_key",
          "nullsNotDistinct": false,
          "columns": [
            "hack_id",
            "prerequisite_hack_id"
          ]
        }
      },
      "policies": {
        "Admin manage prerequisites": {
          "name": "Admin manage prerequisites",
          "as": "PERMISSIVE",
          "for": "ALL",
          "to": [
            "public"
          ],
          "using": "(EXISTS ( SELECT 1\n   FROM profiles\n  WHERE ((profiles.id = auth.uid()) AND (profiles.is_admin = true))))"
        },
        "Public prerequisites read access": {
          "name": "Public prerequisites read access",
          "as": "PERMISSIVE",
          "for": "SELECT",
          "to": [
            "public"
          ]
        }
      },
      "checkConstraints": {
        "no_self_prerequisite": {
          "name": "no_self_prerequisite",
          "value": "hack_id <> prerequisite_hack_id"
        }
      },
      "isRLSEnabled": false
    },
    "public.hack_tags": {
      "name": "hack_tags",
      "schema": "",
      "columns": {
        "hack_id": {
          "name": "hack_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "tag_id": {
          "name": "tag_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "assigned_at": {
          "name": "assigned_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": true,
          "default": "timezone('utc'::text, now())"
        },
        "assigned_by": {
          "name": "assigned_by",
          "type": "uuid",
          "primaryKey": false,
          "notNull": false
        }
      },
      "indexes": {
        "idx_hack_tags_hack_id": {
          "name": "idx_hack_tags_hack_id",
          "columns": [
            {
              "expression": "hack_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "uuid_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "idx_hack_tags_tag_id": {
          "name": "idx_hack_tags_tag_id",
          "columns": [
            {
              "expression": "tag_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "uuid_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        }
      },
      "foreignKeys": {
        "hack_tags_hack_id_fkey": {
          "name": "hack_tags_hack_id_fkey",
          "tableFrom": "hack_tags",
          "tableTo": "hacks",
          "columnsFrom": [
            "hack_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "cascade",
          "onUpdate": "no action"
        },
        "hack_tags_tag_id_fkey": {
          "name": "hack_tags_tag_id_fkey",
          "tableFrom": "hack_tags",
          "tableTo": "tags",
          "columnsFrom": [
            "tag_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "cascade",
          "onUpdate": "no action"
        },
        "hack_tags_assigned_by_fkey": {
          "name": "hack_tags_assigned_by_fkey",
          "tableFrom": "hack_tags",
          "tableTo": "profiles",
          "columnsFrom": [
            "assigned_by"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "set null",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {
        "hack_tags_pkey": {
          "name": "hack_tags_pkey",
          "columns": [
            "hack_id",
            "tag_id"
          ]
        }
      },
      "uniqueConstraints": {},
      "policies": {
        "Hack tags are viewable by everyone": {
          "name": "Hack tags are viewable by everyone",
          "as": "PERMISSIVE",
          "for": "SELECT",
          "to": [
            "public"
          ],
          "using": "true"
        },
        "Only admins can manage hack tags": {
          "name": "Only admins can manage hack tags",
          "as": "PERMISSIVE",
          "for": "ALL",
          "to": [
            "public"
          ]
        }
      },
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.hacks": {
      "name": "hacks",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true,
          "default": "gen_random_uuid()"
        },
        "name": {
          "name": "name",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "description": {
          "name": "description",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "image_url": {
          "name": "image_url",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "content_type": {
          "name": "content_type",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "content_body": {
          "name": "content_body",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "external_link": {
          "name": "external_link",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": false,
          "default": "now()"
        },
        "updated_at": {
          "name": "updated_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": false,
          "default": "now()"
        },
        "created_by": {
          "name": "created_by",
          "type": "uuid",
          "primaryKey": false,
          "notNull": false
        },
        "image_path": {
          "name": "image_path",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        }
      },
      "indexes": {},
      "foreignKeys": {
        "hacks_created_by_fkey": {
          "name": "hacks_created_by_fkey",
          "tableFrom": "hacks",
          "tableTo": "profiles",
          "columnsFrom": [
            "created_by"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "set null",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {
        "Public hacks read access": {
          "name": "Public hacks read access",
          "as": "PERMISSIVE",
          "for": "SELECT",
          "to": [
            "public"
          ],
          "using": "true"
        },
        "Admin create hacks": {
          "name": "Admin create hacks",
          "as": "PERMISSIVE",
          "for": "INSERT",
          "to": [
            "public"
          ]
        },
        "Admin update hacks": {
          "name": "Admin update hacks",
          "as": "PERMISSIVE",
          "for": "UPDATE",
          "to": [
            "public"
          ]
        },
        "Admin delete hacks": {
          "name": "Admin delete hacks",
          "as": "PERMISSIVE",
          "for": "DELETE",
          "to": [
            "public"
          ]
        }
      },
      "checkConstraints": {
        "hacks_content_type_check": {
          "name": "hacks_content_type_check",
          "value": "content_type = ANY (ARRAY['content'::text, 'link'::text])"
        },
        "content_xor_link": {
          "name": "content_xor_link",
          "value": "((content_type = 'content'::text) AND (content_body IS NOT NULL) AND (external_link IS NULL)) OR ((content_type = 'link'::text) AND (external_link IS NOT NULL) AND (content_body IS NULL))"
        },
        "hacks_image_check": {
          "name": "hacks_image_check",
          "value": "(image_url IS NOT NULL) OR (image_path IS NOT NULL)"
        }
      },
      "isRLSEnabled": false
    },
    "public.onboarding_responses": {
      "name": "onboarding_responses",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true,
          "default": "gen_random_uuid()"
        },
        "user_id": {
          "name": "user_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": false
        },
        "question_id": {
          "name": "question_id",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "answer": {
          "name": "answer",
          "type": "jsonb",
          "primaryKey": false,
          "notNull": true
        },
        "completed_at": {
          "name": "completed_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": false
        },
        "skipped": {
          "name": "skipped",
          "type": "boolean",
          "primaryKey": false,
          "notNull": false,
          "default": false
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": true,
          "default": "timezone('utc'::text, now())"
        }
      },
      "indexes": {
        "idx_onboarding_responses_user_id": {
          "name": "idx_onboarding_responses_user_id",
          "columns": [
            {
              "expression": "user_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "uuid_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        }
      },
      "foreignKeys": {
        "onboarding_responses_user_id_fkey": {
          "name": "onboarding_responses_user_id_fkey",
          "tableFrom": "onboarding_responses",
          "tableTo": "profiles",
          "columnsFrom": [
            "user_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "cascade",
          "onUpdate": "no action"
        },
        "onboarding_responses_question_id_fkey": {
          "name": "onboarding_responses_question_id_fkey",
          "tableFrom": "onboarding_responses",
          "tableTo": "questions",
          "columnsFrom": [
            "question_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "cascade",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {
        "onboarding_responses_user_id_question_id_key": {
          "name": "onboarding_responses_user_id_question_id_key",
          "nullsNotDistinct": false,
          "columns": [
            "user_id",
            "question_id"
          ]
        }
      },
      "policies": {
        "Users can view their own responses": {
          "name": "Users can view their own responses",
          "as": "PERMISSIVE",
          "for": "SELECT",
          "to": [
            "public"
          ],
          "using": "(user_id = auth.uid())"
        },
        "Users can manage their own responses": {
          "name": "Users can manage their own responses",
          "as": "PERMISSIVE",
          "for": "ALL",
          "to": [
            "public"
          ]
        },
        "Admins can view all responses": {
          "name": "Admins can view all responses",
          "as": "PERMISSIVE",
          "for": "SELECT",
          "to": [
            "public"
          ]
        }
      },
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.profiles": {
      "name": "profiles",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true
        },
        "email": {
          "name": "email",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "full_name": {
          "name": "full_name",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "avatar_url": {
          "name": "avatar_url",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "updated_at": {
          "name": "updated_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": true,
          "default": "timezone('utc'::text, now())"
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": true,
          "default": "timezone('utc'::text, now())"
        },
        "is_admin": {
          "name": "is_admin",
          "type": "boolean",
          "primaryKey": false,
          "notNull": false,
          "default": false
        },
        "discord_id": {
          "name": "discord_id",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "discord_username": {
          "name": "discord_username",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "discord_roles": {
          "name": "discord_roles",
          "type": "text[]",
          "primaryKey": false,
          "notNull": false,
          "default": "'{\"\"}'"
        }
      },
      "indexes": {
        "idx_profiles_discord_id": {
          "name": "idx_profiles_discord_id",
          "columns": [
            {
              "expression": "discord_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "text_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "idx_profiles_discord_roles": {
          "name": "idx_profiles_discord_roles",
          "columns": [
            {
              "expression": "discord_roles",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "array_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "gin",
          "with": {}
        },
        "idx_profiles_is_admin": {
          "name": "idx_profiles_is_admin",
          "columns": [
            {
              "expression": "is_admin",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "bool_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        }
      },
      "foreignKeys": {},
      "compositePrimaryKeys": {},
      "uniqueConstraints": {
        "profiles_email_key": {
          "name": "profiles_email_key",
          "nullsNotDistinct": false,
          "columns": [
            "email"
          ]
        },
        "profiles_discord_id_key": {
          "name": "profiles_discord_id_key",
          "nullsNotDistinct": false,
          "columns": [
            "discord_id"
          ]
        }
      },
      "policies": {
        "Users can insert their own profile": {
          "name": "Users can insert their own profile",
          "as": "PERMISSIVE",
          "for": "INSERT",
          "to": [
            "public"
          ],
          "withCheck": "(auth.uid() = id)"
        },
        "Users can update their own profile": {
          "name": "Users can update their own profile",
          "as": "PERMISSIVE",
          "for": "UPDATE",
          "to": [
            "public"
          ]
        },
        "Users can view own profile": {
          "name": "Users can view own profile",
          "as": "PERMISSIVE",
          "for": "SELECT",
          "to": [
            "public"
          ]
        },
        "Admins can view all profiles": {
          "name": "Admins can view all profiles",
          "as": "PERMISSIVE",
          "for": "SELECT",
          "to": [
            "public"
          ]
        },
        "Service role can update Discord fields": {
          "name": "Service role can update Discord fields",
          "as": "PERMISSIVE",
          "for": "UPDATE",
          "to": [
            "public"
          ]
        }
      },
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.question_options": {
      "name": "question_options",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true,
          "default": "gen_random_uuid()"
        },
        "question_id": {
          "name": "question_id",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "value": {
          "name": "value",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "label": {
          "name": "label",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "description": {
          "name": "description",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "icon": {
          "name": "icon",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "sort_order": {
          "name": "sort_order",
          "type": "integer",
          "primaryKey": false,
          "notNull": true,
          "default": 0
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": false,
          "default": "timezone('utc'::text, now())"
        },
        "updated_at": {
          "name": "updated_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": false,
          "default": "timezone('utc'::text, now())"
        }
      },
      "indexes": {
        "idx_question_options_question_id": {
          "name": "idx_question_options_question_id",
          "columns": [
            {
              "expression": "question_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "text_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "idx_question_options_sort_order": {
          "name": "idx_question_options_sort_order",
          "columns": [
            {
              "expression": "sort_order",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "int4_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        }
      },
      "foreignKeys": {
        "question_options_question_id_fkey": {
          "name": "question_options_question_id_fkey",
          "tableFrom": "question_options",
          "tableTo": "questions",
          "columnsFrom": [
            "question_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "cascade",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {
        "question_options_question_id_value_key": {
          "name": "question_options_question_id_value_key",
          "nullsNotDistinct": false,
          "columns": [
            "question_id",
            "value"
          ]
        }
      },
      "policies": {
        "Question options are viewable by everyone": {
          "name": "Question options are viewable by everyone",
          "as": "PERMISSIVE",
          "for": "SELECT",
          "to": [
            "public"
          ],
          "using": "true"
        },
        "Only admins can insert question options": {
          "name": "Only admins can insert question options",
          "as": "PERMISSIVE",
          "for": "INSERT",
          "to": [
            "public"
          ]
        },
        "Only admins can update question options": {
          "name": "Only admins can update question options",
          "as": "PERMISSIVE",
          "for": "UPDATE",
          "to": [
            "public"
          ]
        },
        "Only admins can delete question options": {
          "name": "Only admins can delete question options",
          "as": "PERMISSIVE",
          "for": "DELETE",
          "to": [
            "public"
          ]
        }
      },
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.questions": {
      "name": "questions",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "text",
          "primaryKey": true,
          "notNull": true
        },
        "title": {
          "name": "title",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "description": {
          "name": "description",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "type": {
          "name": "type",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "category": {
          "name": "category",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "sort_order": {
          "name": "sort_order",
          "type": "integer",
          "primaryKey": false,
          "notNull": true,
          "default": 0
        },
        "is_active": {
          "name": "is_active",
          "type": "boolean",
          "primaryKey": false,
          "notNull": false,
          "default": true
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": false,
          "default": "timezone('utc'::text, now())"
        },
        "updated_at": {
          "name": "updated_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": false,
          "default": "timezone('utc'::text, now())"
        }
      },
      "indexes": {
        "idx_questions_is_active": {
          "name": "idx_questions_is_active",
          "columns": [
            {
              "expression": "is_active",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "bool_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "idx_questions_sort_order": {
          "name": "idx_questions_sort_order",
          "columns": [
            {
              "expression": "sort_order",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "int4_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        }
      },
      "foreignKeys": {},
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {
        "Questions are viewable by everyone": {
          "name": "Questions are viewable by everyone",
          "as": "PERMISSIVE",
          "for": "SELECT",
          "to": [
            "public"
          ],
          "using": "true"
        },
        "Only admins can insert questions": {
          "name": "Only admins can insert questions",
          "as": "PERMISSIVE",
          "for": "INSERT",
          "to": [
            "public"
          ]
        },
        "Only admins can update questions": {
          "name": "Only admins can update questions",
          "as": "PERMISSIVE",
          "for": "UPDATE",
          "to": [
            "public"
          ]
        },
        "Only admins can delete questions": {
          "name": "Only admins can delete questions",
          "as": "PERMISSIVE",
          "for": "DELETE",
          "to": [
            "public"
          ]
        }
      },
      "checkConstraints": {
        "questions_type_check": {
          "name": "questions_type_check",
          "value": "type = ANY (ARRAY['single'::text, 'multiple'::text])"
        },
        "questions_category_check": {
          "name": "questions_category_check",
          "value": "category = ANY (ARRAY['experience'::text, 'interests'::text, 'goals'::text, 'time'::text, 'difficulty'::text])"
        }
      },
      "isRLSEnabled": false
    },
    "public.tag_sync_log": {
      "name": "tag_sync_log",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true,
          "default": "gen_random_uuid()"
        },
        "user_id": {
          "name": "user_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": false
        },
        "tag_id": {
          "name": "tag_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": false
        },
        "action": {
          "name": "action",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "source": {
          "name": "source",
          "type": "tag_source",
          "typeSchema": "public",
          "primaryKey": false,
          "notNull": true
        },
        "target": {
          "name": "target",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "previous_value": {
          "name": "previous_value",
          "type": "jsonb",
          "primaryKey": false,
          "notNull": false
        },
        "new_value": {
          "name": "new_value",
          "type": "jsonb",
          "primaryKey": false,
          "notNull": false
        },
        "conflict_details": {
          "name": "conflict_details",
          "type": "jsonb",
          "primaryKey": false,
          "notNull": false
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": true,
          "default": "timezone('utc'::text, now())"
        }
      },
      "indexes": {
        "idx_tag_sync_log_created_at": {
          "name": "idx_tag_sync_log_created_at",
          "columns": [
            {
              "expression": "created_at",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "timestamptz_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "idx_tag_sync_log_user_id": {
          "name": "idx_tag_sync_log_user_id",
          "columns": [
            {
              "expression": "user_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "uuid_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        }
      },
      "foreignKeys": {
        "tag_sync_log_user_id_fkey": {
          "name": "tag_sync_log_user_id_fkey",
          "tableFrom": "tag_sync_log",
          "tableTo": "profiles",
          "columnsFrom": [
            "user_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "cascade",
          "onUpdate": "no action"
        },
        "tag_sync_log_tag_id_fkey": {
          "name": "tag_sync_log_tag_id_fkey",
          "tableFrom": "tag_sync_log",
          "tableTo": "tags",
          "columnsFrom": [
            "tag_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "cascade",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {
        "Users can view their own sync logs": {
          "name": "Users can view their own sync logs",
          "as": "PERMISSIVE",
          "for": "SELECT",
          "to": [
            "public"
          ],
          "using": "(user_id = auth.uid())"
        },
        "Admins can view all sync logs": {
          "name": "Admins can view all sync logs",
          "as": "PERMISSIVE",
          "for": "SELECT",
          "to": [
            "public"
          ]
        }
      },
      "checkConstraints": {
        "tag_sync_log_action_check": {
          "name": "tag_sync_log_action_check",
          "value": "action = ANY (ARRAY['added'::text, 'removed'::text, 'conflict_resolved'::text])"
        },
        "tag_sync_log_target_check": {
          "name": "tag_sync_log_target_check",
          "value": "target = ANY (ARRAY['web'::text, 'discord'::text])"
        }
      },
      "isRLSEnabled": false
    },
    "public.tags": {
      "name": "tags",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true,
          "default": "gen_random_uuid()"
        },
        "name": {
          "name": "name",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "slug": {
          "name": "slug",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": true,
          "default": "timezone('utc'::text, now())"
        },
        "updated_at": {
          "name": "updated_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": true,
          "default": "timezone('utc'::text, now())"
        },
        "created_by": {
          "name": "created_by",
          "type": "uuid",
          "primaryKey": false,
          "notNull": false
        },
        "deleted_at": {
          "name": "deleted_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": false
        },
        "tag_type": {
          "name": "tag_type",
          "type": "tag_type",
          "typeSchema": "public",
          "primaryKey": false,
          "notNull": false,
          "default": "'content'"
        },
        "discord_role_name": {
          "name": "discord_role_name",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "discord_role_id": {
          "name": "discord_role_id",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "is_user_assignable": {
          "name": "is_user_assignable",
          "type": "boolean",
          "primaryKey": false,
          "notNull": false,
          "default": false
        },
        "display_order": {
          "name": "display_order",
          "type": "integer",
          "primaryKey": false,
          "notNull": false,
          "default": 0
        },
        "description": {
          "name": "description",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        }
      },
      "indexes": {
        "idx_tags_discord_role_id": {
          "name": "idx_tags_discord_role_id",
          "columns": [
            {
              "expression": "discord_role_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "text_ops"
            }
          ],
          "isUnique": false,
          "where": "(discord_role_id IS NOT NULL)",
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "idx_tags_is_user_assignable": {
          "name": "idx_tags_is_user_assignable",
          "columns": [
            {
              "expression": "is_user_assignable",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "bool_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "idx_tags_name_lower": {
          "name": "idx_tags_name_lower",
          "columns": [
            {
              "expression": "lower(name)",
              "asc": true,
              "isExpression": true,
              "nulls": "last"
            }
          ],
          "isUnique": false,
          "where": "(deleted_at IS NULL)",
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "idx_tags_slug": {
          "name": "idx_tags_slug",
          "columns": [
            {
              "expression": "slug",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "text_ops"
            }
          ],
          "isUnique": false,
          "where": "(deleted_at IS NULL)",
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "idx_tags_tag_type": {
          "name": "idx_tags_tag_type",
          "columns": [
            {
              "expression": "tag_type",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "enum_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "tags_name_unique_idx": {
          "name": "tags_name_unique_idx",
          "columns": [
            {
              "expression": "lower(name)",
              "asc": true,
              "isExpression": true,
              "nulls": "last"
            }
          ],
          "isUnique": true,
          "where": "(deleted_at IS NULL)",
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "tags_slug_unique_idx": {
          "name": "tags_slug_unique_idx",
          "columns": [
            {
              "expression": "slug",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "text_ops"
            }
          ],
          "isUnique": true,
          "where": "(deleted_at IS NULL)",
          "concurrently": false,
          "method": "btree",
          "with": {}
        }
      },
      "foreignKeys": {
        "tags_created_by_fkey": {
          "name": "tags_created_by_fkey",
          "tableFrom": "tags",
          "tableTo": "profiles",
          "columnsFrom": [
            "created_by"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "set null",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {
        "Tags are viewable by everyone": {
          "name": "Tags are viewable by everyone",
          "as": "PERMISSIVE",
          "for": "SELECT",
          "to": [
            "public"
          ],
          "using": "(deleted_at IS NULL)"
        },
        "Only admins can create tags": {
          "name": "Only admins can create tags",
          "as": "PERMISSIVE",
          "for": "INSERT",
          "to": [
            "public"
          ]
        },
        "Only admins can update tags": {
          "name": "Only admins can update tags",
          "as": "PERMISSIVE",
          "for": "UPDATE",
          "to": [
            "public"
          ]
        },
        "Only admins can delete tags": {
          "name": "Only admins can delete tags",
          "as": "PERMISSIVE",
          "for": "DELETE",
          "to": [
            "public"
          ]
        }
      },
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.user_hack_completions": {
      "name": "user_hack_completions",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true,
          "default": "gen_random_uuid()"
        },
        "user_id": {
          "name": "user_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "hack_id": {
          "name": "hack_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "completed_at": {
          "name": "completed_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": false,
          "default": "now()"
        }
      },
      "indexes": {
        "idx_user_hack_completions_hack_id": {
          "name": "idx_user_hack_completions_hack_id",
          "columns": [
            {
              "expression": "hack_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "uuid_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "idx_user_hack_completions_user_id": {
          "name": "idx_user_hack_completions_user_id",
          "columns": [
            {
              "expression": "user_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "uuid_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        }
      },
      "foreignKeys": {
        "user_hack_completions_user_id_fkey": {
          "name": "user_hack_completions_user_id_fkey",
          "tableFrom": "user_hack_completions",
          "tableTo": "profiles",
          "columnsFrom": [
            "user_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "cascade",
          "onUpdate": "no action"
        },
        "user_hack_completions_hack_id_fkey": {
          "name": "user_hack_completions_hack_id_fkey",
          "tableFrom": "user_hack_completions",
          "tableTo": "hacks",
          "columnsFrom": [
            "hack_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "cascade",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {
        "user_hack_completions_user_id_hack_id_key": {
          "name": "user_hack_completions_user_id_hack_id_key",
          "nullsNotDistinct": false,
          "columns": [
            "user_id",
            "hack_id"
          ]
        }
      },
      "policies": {
        "Public completions read access": {
          "name": "Public completions read access",
          "as": "PERMISSIVE",
          "for": "SELECT",
          "to": [
            "public"
          ],
          "using": "true"
        },
        "Users insert own completions": {
          "name": "Users insert own completions",
          "as": "PERMISSIVE",
          "for": "INSERT",
          "to": [
            "public"
          ]
        }
      },
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.user_hack_likes": {
      "name": "user_hack_likes",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true,
          "default": "gen_random_uuid()"
        },
        "user_id": {
          "name": "user_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "hack_id": {
          "name": "hack_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": false,
          "default": "now()"
        }
      },
      "indexes": {
        "idx_user_hack_likes_hack_id": {
          "name": "idx_user_hack_likes_hack_id",
          "columns": [
            {
              "expression": "hack_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "uuid_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "idx_user_hack_likes_user_id": {
          "name": "idx_user_hack_likes_user_id",
          "columns": [
            {
              "expression": "user_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "uuid_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        }
      },
      "foreignKeys": {
        "user_hack_likes_user_id_fkey": {
          "name": "user_hack_likes_user_id_fkey",
          "tableFrom": "user_hack_likes",
          "tableTo": "profiles",
          "columnsFrom": [
            "user_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "cascade",
          "onUpdate": "no action"
        },
        "user_hack_likes_hack_id_fkey": {
          "name": "user_hack_likes_hack_id_fkey",
          "tableFrom": "user_hack_likes",
          "tableTo": "hacks",
          "columnsFrom": [
            "hack_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "cascade",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {
        "user_hack_likes_user_id_hack_id_key": {
          "name": "user_hack_likes_user_id_hack_id_key",
          "nullsNotDistinct": false,
          "columns": [
            "user_id",
            "hack_id"
          ]
        }
      },
      "policies": {
        "Public likes read access": {
          "name": "Public likes read access",
          "as": "PERMISSIVE",
          "for": "SELECT",
          "to": [
            "public"
          ],
          "using": "true"
        },
        "Users insert own likes": {
          "name": "Users insert own likes",
          "as": "PERMISSIVE",
          "for": "INSERT",
          "to": [
            "public"
          ]
        },
        "Users delete own likes": {
          "name": "Users delete own likes",
          "as": "PERMISSIVE",
          "for": "DELETE",
          "to": [
            "public"
          ]
        }
      },
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.user_tags": {
      "name": "user_tags",
      "schema": "",
      "columns": {
        "user_id": {
          "name": "user_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "tag_id": {
          "name": "tag_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "assigned_at": {
          "name": "assigned_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": true,
          "default": "timezone('utc'::text, now())"
        },
        "source": {
          "name": "source",
          "type": "tag_source",
          "typeSchema": "public",
          "primaryKey": false,
          "notNull": false,
          "default": "'system'"
        },
        "updated_at": {
          "name": "updated_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": true,
          "default": "timezone('utc'::text, now())"
        }
      },
      "indexes": {
        "idx_user_tags_tag_id": {
          "name": "idx_user_tags_tag_id",
          "columns": [
            {
              "expression": "tag_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "uuid_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "idx_user_tags_updated_at": {
          "name": "idx_user_tags_updated_at",
          "columns": [
            {
              "expression": "updated_at",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "timestamptz_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "idx_user_tags_user_id": {
          "name": "idx_user_tags_user_id",
          "columns": [
            {
              "expression": "user_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "uuid_ops"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        }
      },
      "foreignKeys": {
        "user_tags_user_id_fkey": {
          "name": "user_tags_user_id_fkey",
          "tableFrom": "user_tags",
          "tableTo": "profiles",
          "columnsFrom": [
            "user_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "cascade",
          "onUpdate": "no action"
        },
        "user_tags_tag_id_fkey": {
          "name": "user_tags_tag_id_fkey",
          "tableFrom": "user_tags",
          "tableTo": "tags",
          "columnsFrom": [
            "tag_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "cascade",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {
        "user_tags_pkey": {
          "name": "user_tags_pkey",
          "columns": [
            "user_id",
            "tag_id"
          ]
        }
      },
      "uniqueConstraints": {},
      "policies": {
        "Users can view their own tags": {
          "name": "Users can view their own tags",
          "as": "PERMISSIVE",
          "for": "SELECT",
          "to": [
            "public"
          ],
          "using": "(user_id = auth.uid())"
        },
        "Admins can view all user tags": {
          "name": "Admins can view all user tags",
          "as": "PERMISSIVE",
          "for": "SELECT",
          "to": [
            "public"
          ]
        },
        "Users can manage their onboarding tags": {
          "name": "Users can manage their onboarding tags",
          "as": "PERMISSIVE",
          "for": "ALL",
          "to": [
            "public"
          ]
        },
        "Admins can manage all user tags": {
          "name": "Admins can manage all user tags",
          "as": "PERMISSIVE",
          "for": "ALL",
          "to": [
            "public"
          ]
        }
      },
      "checkConstraints": {},
      "isRLSEnabled": false
    }
  },
  "enums": {
    "public.tag_source": {
      "name": "tag_source",
      "schema": "public",
      "values": [
        "onboarding",
        "discord",
        "admin",
        "system"
      ]
    },
    "public.tag_type": {
      "name": "tag_type",
      "schema": "public",
      "values": [
        "user_experience",
        "user_interest",
        "user_special",
        "content"
      ]
    }
  },
  "schemas": {},
  "sequences": {},
  "roles": {},
  "policies": {},
  "views": {},
  "_meta": {
    "columns": {},
    "schemas": {},
    "tables": {}
  }
}