// This is the clean Prisma schema for production
// It only includes the tables we actually need (no auth tables)

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_URL") // Uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // Uses a direct connection
}

// Enums
enum ContentType {
  content
  link
}

enum QuestionType {
  single_choice
  multiple_choice
  text
}

enum TagSource {
  web
  discord
  onboarding
  admin
  system
}

enum TagType {
  user_experience
  user_interest
  user_special
  content
}

enum UserHackStatus {
  interested
  liked
  visited
}

// Auth.js Models
model User {
  id            String    @id @default(uuid()) @db.Uuid
  email         String    @unique
  emailVerified DateTime? @map("email_verified")
  name          String?
  image         String?
  isAdmin       Boolean   @default(false) @map("is_admin")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  // Auth.js relations
  accounts      Account[]
  sessions      Session[]

  // App relations
  createdHacks  Hack[]    @relation("HackCreator")
  userHacks     UserHack[]
  userTags      UserTag[]
  createdRoutines Routine[] @relation("RoutineCreator")
  userRoutines  UserRoutine[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id") @db.Uuid
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id") @db.Uuid
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Hack {
  id            String      @id @default(uuid()) @db.Uuid
  name          String
  slug          String      @unique
  description   String
  imageUrl      String?     @map("image_url")
  imagePath     String?     @map("image_path")
  contentType   String      @default("content") @map("content_type")
  contentBody   String?     @map("content_body")
  externalLink  String?     @map("external_link")
  difficulty    String?
  timeMinutes   Int?        @map("time_minutes")
  createdAt     DateTime?   @default(now()) @map("created_at")
  updatedAt     DateTime?   @default(now()) @updatedAt @map("updated_at")
  createdBy     String?     @map("created_by") @db.Uuid
  updatedBy     String?     @map("updated_by") @db.Uuid

  // Relations
  creator               User?                @relation("HackCreator", fields: [createdBy], references: [id])
  userHacks             UserHack[]
  hackTags              HackTag[]
  prerequisites         HackPrerequisite[]   @relation("HackPrerequisites")
  prerequisiteFor       HackPrerequisite[]   @relation("PrerequisiteHacks")
  routineHacks          RoutineHack[]

  @@map("hacks")
}

model Tag {
  id          String      @id @default(uuid()) @db.Uuid
  name        String      @unique
  slug        String      @unique
  tagType     String      @default("hack") @map("tag_type")
  description String?
  category    String?
  color       String?
  createdAt   DateTime?   @default(now()) @map("created_at")
  updatedAt   DateTime?   @default(now()) @updatedAt @map("updated_at")

  // Relations
  hackTags    HackTag[]
  userTags    UserTag[]
  routineTags RoutineTag[]

  @@map("tags")
}

model UserHack {
  id            String      @id @default(uuid()) @db.Uuid
  userId        String?     @map("user_id") @db.Uuid
  hackId        String?     @map("hack_id") @db.Uuid
  liked         Boolean     @default(false)
  viewed        Boolean     @default(false)
  viewedAt      DateTime?   @map("viewed_at")
  status        String?     // deprecated - use liked/viewed instead
  startedAt     DateTime?   @default(now()) @map("started_at")
  completedAt   DateTime?   @map("completed_at")
  createdAt     DateTime?   @default(now()) @map("created_at")
  updatedAt     DateTime?   @default(now()) @updatedAt @map("updated_at")

  // Relations
  user          User?       @relation(fields: [userId], references: [id], onDelete: Cascade)
  hack          Hack?       @relation(fields: [hackId], references: [id], onDelete: Cascade)

  @@unique([userId, hackId])
  @@map("user_hacks")
}

model HackPrerequisite {
  id                    String    @id @default(uuid()) @db.Uuid
  hackId                String?   @map("hack_id") @db.Uuid
  prerequisiteHackId    String?   @map("prerequisite_hack_id") @db.Uuid
  createdAt             DateTime? @default(now()) @map("created_at")

  // Relations
  hack                  Hack?     @relation("HackPrerequisites", fields: [hackId], references: [id], onDelete: Cascade)
  prerequisiteHack      Hack?     @relation("PrerequisiteHacks", fields: [prerequisiteHackId], references: [id], onDelete: Cascade)

  @@unique([hackId, prerequisiteHackId])
  @@map("hack_prerequisites")
}

model HackTag {
  hackId        String    @map("hack_id") @db.Uuid
  tagId         String    @map("tag_id") @db.Uuid
  createdAt     DateTime? @default(now()) @map("created_at")

  // Relations
  hack          Hack      @relation(fields: [hackId], references: [id], onDelete: Cascade)
  tag           Tag       @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([hackId, tagId])
  @@map("hack_tags")
}

model UserTag {
  id            String    @id @default(uuid()) @db.Uuid
  userId        String?   @map("user_id") @db.Uuid
  tagId         String?   @map("tag_id") @db.Uuid
  source        String    @default("system")
  createdAt     DateTime? @default(now()) @map("created_at")

  // Relations
  user          User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  tag           Tag?      @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@unique([userId, tagId])
  @@map("user_tags")
}

model Routine {
  id            String      @id @default(uuid()) @db.Uuid
  name          String
  slug          String      @unique
  description   String
  imageUrl      String?     @map("image_url")
  imagePath     String?     @map("image_path")
  isPublic      Boolean     @default(false) @map("is_public")
  createdBy     String      @map("created_by") @db.Uuid
  createdAt     DateTime    @default(now()) @map("created_at")
  updatedAt     DateTime    @updatedAt @map("updated_at")

  // Relations
  creator       User        @relation("RoutineCreator", fields: [createdBy], references: [id])
  routineHacks  RoutineHack[]
  routineTags   RoutineTag[]
  userRoutines  UserRoutine[]

  @@map("routines")
}

model RoutineHack {
  id            String      @id @default(uuid()) @db.Uuid
  routineId     String      @map("routine_id") @db.Uuid
  hackId        String      @map("hack_id") @db.Uuid
  position      Int         @default(0)
  createdAt     DateTime    @default(now()) @map("created_at")

  // Relations
  routine       Routine     @relation(fields: [routineId], references: [id], onDelete: Cascade)
  hack          Hack        @relation(fields: [hackId], references: [id], onDelete: Cascade)

  @@unique([routineId, hackId])
  @@map("routine_hacks")
}

model RoutineTag {
  routineId     String      @map("routine_id") @db.Uuid
  tagId         String      @map("tag_id") @db.Uuid
  createdAt     DateTime    @default(now()) @map("created_at")

  // Relations
  routine       Routine     @relation(fields: [routineId], references: [id], onDelete: Cascade)
  tag           Tag         @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([routineId, tagId])
  @@map("routine_tags")
}

model UserRoutine {
  id            String      @id @default(uuid()) @db.Uuid
  userId        String      @map("user_id") @db.Uuid
  routineId     String      @map("routine_id") @db.Uuid
  liked         Boolean     @default(false)
  started       Boolean     @default(false)
  completed     Boolean     @default(false)
  startedAt     DateTime?   @map("started_at")
  completedAt   DateTime?   @map("completed_at")
  progress      Int         @default(0) // Percentage of hacks completed
  createdAt     DateTime    @default(now()) @map("created_at")
  updatedAt     DateTime    @updatedAt @map("updated_at")

  // Relations
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  routine       Routine     @relation(fields: [routineId], references: [id], onDelete: Cascade)

  @@unique([userId, routineId])
  @@map("user_routines")
}